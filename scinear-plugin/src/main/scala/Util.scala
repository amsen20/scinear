package scinear

import dotty.tools.dotc.ast.tpd
import dotty.tools.dotc.core.Contexts.Context
import dotty.tools.dotc.core.Symbols
import dotty.tools.dotc.core.TypeUtils
import dotty.tools.dotc.core.Types

// Generated field access methods e.g.: _1
final val FIELD_ACCESS_PATTERN = "(_\\d+)".r
// Generated default copy methods e.g.: copy$default$1
final val COPY_DEFAULT_PATTERN = "(copy\\$default\\$\\d+)".r
// Generated copy method
final val COPY_PATTERN = "(copy)".r

// TODO: use definitions from `dotty.tools.dotc.core.Definitions` in the context to find the methods generated by the compiler
def isCompilerGeneratedMethod(defDef: tpd.DefDef)(using Context): Boolean = {
  val name = defDef.name.toString

  if (FIELD_ACCESS_PATTERN.matches(name)) return true
  if (COPY_DEFAULT_PATTERN.matches(name)) return true
  if (COPY_PATTERN.matches(name)) return true
  false
}

def isFunctionOkToHaveUnsafeAccess(fun: tpd.Tree)(using Context): Boolean = {
  fun match
    case tpd.Select(_, name) =>
      name.toString == "apply" || name.toString == "unapply" || name.toString == "<init>"
    case _ => false
}

def isDirectLinear(tpe: Types.Type)(using Context): Boolean =
  // TODO: tpe.isThisTypeOf() --- check if this works
  tpe.baseClasses.exists(_.fullName.toString == "scinear.Linear")

def isFunctionType(tpe: Types.Type)(using Context): Boolean =
  // TODO: Make sure this is the correct way
  tpe.baseClasses.exists(_.fullName.toString.startsWith("scala.Function"))

def isFunctionLinear(tpe: Types.Type)(using Context): Boolean = ???

def isLinear(tpe: Types.Type)(using Context): Boolean =
  // FIXME: Should not allow polymorphic functions to get linear types as type arguments.
  isDirectLinear(tpe) || (
    tpe match
      case Types.AppliedType(
            tycon,
            args
          ) => // promote types with linear arguments to be linear themselves
        // NOTE: If capturing linear values is allowed, then should check if this is curried or not.
        args.exists(isLinear(_)) && !isFunctionType(tycon)
      case _ =>
        false
  )

def isLinear(sym: Symbols.Symbol)(using Context): Boolean =
  isLinear(sym.info)
